#!/bin/bash

function assign_user_role_credential {
    TOP_DIR=$1
    source $TOP_DIR/openrc admin admin
    #set -x
    serviceTenantID=`keystone tenant-list | grep "service" | awk '{print $2}'`
    serviceRoleID=`keystone role-list | grep "service" | awk '{print $2}'`
    adminRoleID=`keystone role-list | grep "admin" | awk '{print $2}'`
    keystone user-role-add --user nova --tenant $serviceTenantID --role $serviceRoleID
    keystone user-role-add --user neutron --tenant $serviceTenantID --role $adminRoleID
}

function create_ext_net {
    TOP_DIR=$1
    source $TOP_DIR/stackrc
    EXT_NET_NAME=ext-net
    EXT_NET_SUBNET_NAME=ext-net-subnet
    EXT_NET_GATEWAY=192.168.102.254
    EXT_NET_ALLOCATION_POOL_START=192.168.102.81
    EXT_NET_ALLOCATION_POOL_END=192.168.102.90
    EXT_NET_CIDR=192.168.102.0
    EXT_NET_MASK=24
    
    source $TOP_DIR/openrc neutron service
    neutron net-create --router:external=true --shared $EXT_NET_NAME
    neutron subnet-create --ip_version 4 --gateway $EXT_NET_GATEWAY --name $EXT_NET_SUBNET_NAME --allocation-pool start=$EXT_NET_ALLOCATION_POOL_START,end=$EXT_NET_ALLOCATION_POOL_END $EXT_NET_NAME $EXT_NET_CIDR/$EXT_NET_MASK
    subnet_id=`neutron net-list | grep "$EXT_NET_NAME" | awk '{print $6}'`
}

function create_nfp_gbp_resources {
   
   TOP_DIR=$1
   source $TOP_DIR/openrc neutron service
   gbp network-service-policy-create --network-service-params type=ip_pool,name=vip_ip,value=nat_pool svc_mgmt_fip_policy


   gbp service-profile-create --servicetype LOADBALANCER --insertion-mode l3 --shared True --service-flavor haproxy --vendor NFP lb_profile
   gbp service-profile-create --servicetype FIREWALL --insertion-mode l3 --shared True --service-flavor vyos --vendor NFP fw_profile

   gbp group-create svc_management_ptg --service_management True
}

function upload_images_and_launch_configuratorVM {
    
    TOP_DIR=$1
    source $TOP_DIR/openrc neutron service
    ConfiguratorQcow2ImageName=$2
    VyosQcow2Image=$3
    ConfiguratorImageName=configurator
    VyosImageName=vyos
    if [ ! -z "$1" -a "$1" != " " ]; then
        ImageName=$1
        echo "Uploading Image : $ConfiguratorImageName $VyosImageName"
        glance image-create --name $ConfiguratorImageName --disk-format qcow2  --container-format bare  --visibility public --file $ConfiguratorQcow2ImageName
        glance image-create --name $VyosImageName --disk-format qcow2  --container-format bare  --visibility public --file $VyosQcow2Image
    else
        echo "ImageName not provided ..."
        exit
    fi

    InstanceName="configuratorVM_instance"

    GROUP="svc_management_ptg"
    echo "GroupName: $GROUP"
    PortId=$(gbp policy-target-create --policy-target-group $GROUP $InstanceName | grep port_id  | awk '{print $4}')

    sleep 2
    echo "Collecting ImageId : for $ConfiguratorImageName"
    ImageId=`glance image-list|grep $ConfiguratorImageName |awk '{print $2}'`
    if [ ! -z "$ImageId" -a "$ImageId" != " " ]; then
        echo $ImageId
    else
        echo "No image found with name $ConfiguratorImageName ..."
        exit
    fi

    nova boot --flavor m1.medium --image $ImageId --nic port-id=$PortId $InstanceName
    sleep 10

    l2p_id=`gbp ptg-show svc_management_ptg | grep l2_policy_id | awk '{print $4}'`
    l3p_id=`gbp l2p-show $l2p_id | grep l3_policy_id | awk '{print $4}'`
    RouterId=`gbp l3p-show $l3p_id | grep routers | awk '{print $4}'`

    echo "Collecting RouterId : for $RouterName"
    if [ ! -z "$RouterId" -a "$RouterId" != " " ]; then
        echo $RouterId
    else
        echo "Router creation failed with $RouterName ..."
        exit
    fi

    echo "Get IpAddr with port: $PortId"
    IpAddr_extractor=`neutron port-list|grep $PortId|awk '{print $11}'`
    IpAddr_purge_last=${IpAddr_extractor::-1}
    IpAddr=${IpAddr_purge_last//\"/}
    echo "Collecting IpAddr : for $PortId"
    echo $IpAddr
}

function copy_nfp_files_and_start_process {

    TOP_DIR=$1
    cd /opt/stack/gbp/gbpservice/nfp
    sudo cp -r  bin/nfp /usr/bin/
    sudo chmod +x /usr/bin/nfp
    sudo cp -r  bin/nfp_config_agent.ini /etc/
    sudo cp -r  bin/nfp_orch_agent.ini /etc/
    sudo cp -r  bin/nfp_config_agent_proxy.ini /etc/
    sudo rm -rf /etc/agent_proxy
    sudo cp -r agent_proxy /etc/

    echo "Configuring proxy.ini .... with rest_server_address as $IpAddr"
    sudo sed -i "s/rest_server_address=*.*/rest_server_address=$IpAddr/g" /etc/agent_proxy/proxy/proxy.ini
    ipnetns_router=`sudo ip netns |grep $RouterId`

    source $TOP_DIR/functions-common

    echo "Starting orchestrator  >>>> under screen named : config_agent"
    run_process orchestrator "sudo /usr/bin/nfp  --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini --config-file /etc/nfp_orch_agent.ini"
    sleep 1
   
    echo "Starting config_agent_proxy  >>>> under screen named : config_agent_proxy"
    run_process config_agent_proxy "sudo /usr/bin/nfp  --config-file /etc/nfp_config_agent_proxy.ini"
    sleep 1

    echo "Starting proxy server under Router : $RouterId namespace $ipnetns_router >>>> under screen named : proxy"
    run_process proxy "sudo ip netns exec $ipnetns_router /usr/bin/python /etc/agent_proxy/proxy/proxy.py --config-file=/etc/agent_proxy/proxy/proxy.ini"

    sleep 1
    echo "Starting config_agent  >>>> under screen named : config_agent"
    run_process config_agent  "sudo /usr/bin/nfp  --config-file /etc/nfp_config_agent.ini --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini"
    sleep 1

    echo "Running gbp-db-manage"

    source $TOP_DIR/openrc neutron service

    gbp-db-manage --config-file /etc/neutron/neutron.conf upgrade head
    echo "Configuration success ... "

}

function configure_nfp_firewall {
    sudo cp -r /opt/stack/gbp/gbpservice/nfp/Automation-Scripts/oc_noop_firewall_driver /opt/stack/neutron-fwaas/neutron_fwaas/services/firewall/drivers/linux/.
    echo "Firewall Agent topic changed from :L3_AGENT_TOPIC to oc-firewall-agent Topic"
    sudo sed -i "s/topics.L3_AGENT/'oc-firewall-agent'/g" /opt/stack/neutron-fwaas/neutron_fwaas/services/firewall/fwaas_plugin.py

}
function configure_nfp_basic.sh {
    assign_user_role_credential $1
    create_ext_net $1
                        
}
function nfp_setup {
    configure_nfp_basic.sh $1 
    create_nfp_gbp_resources $1
    upload_images_and_launch_configuratorVM $1 $2 $3
    copy_nfp_files_and_start_process $1
}
